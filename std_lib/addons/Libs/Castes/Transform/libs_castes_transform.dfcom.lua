-- Transform a unit based on gender.

-- Based on modtools/transform-unit by expwnent which is based on shapechange by Putnam
-- Warning: This will crash arena mode if you view the unit on the same tick that it transforms
-- if you wait until later, you will be fine.

local utils = require 'utils'

local timeout = rubble.require "libs_timeout"

validArgs = validArgs or utils.invert({
	'help',
	'unit',
	'race',
	'caste',
	'delay',
})

local args = utils.processArgs({...}, validArgs)

if args.help then
	print([[scripts/rubble_caste_transform

Transform a creature into a specified creature/caste based on gender.

For this script to work the target creature need to have pairs of castes with
IDs that start with "MALE_" or "FEMALE_", with the remainder of the caste ID
being the caste name you would pass to this script. For example your creature
has several castes, two of which are "MALE_EXAMPLE" and "FEMALE_EXAMPLE". To
transform a creature into this caste you would use the command:
    'rubble_caste_transform -unit <unitid> -race YOUR_CREATURE -caste EXAMPLE'
The "MALE_" or "FEMALE_" prefix is added based on the gender of the creature
being transformed. A genderless creature will default to the "FEMALE_" prefix.

This script is designed to work with the "Libs/Castes" Rubble addon, all
assumptions about caste names are enforced by construction when working with
castes generated by that addon. Any other users will just have to suck it up
(or you can write your own script for all I care).

Arguments:
    -help
        Print this help message.
    -unit id
        Set the target unit, required.
    -race raceName
        Set the target race, required.
    -caste casteName
        Set the target caste, required.
    -delay ticks
        How long to wait before transforming.
]])
	return
end

if not args.unit then
	error('rubble_caste_transform: Specify a unit ID.')
end
if not tonumber(args.unit) then
	error('rubble_caste_transform: Invalid unit ID:'..args.unit..' Not a number.')
end
if not df.unit.find(tonumber(args.unit)) then
	error('rubble_caste_transform: Invalid unit ID:'..args.unit..' Unit not found.')
end
local unit = df.unit.find(tonumber(args.unit))

if not args.race and not args.caste then
	error('rubble_caste_transform: Specify a target race and caste.')
end
if not args.race then
	error('rubble_caste_transform: Specify a target race.')
end
if not args.caste then
	error('rubble_caste_transform: Specify a target caste.')
end

local raceIndex
local race
local caste
for i,v in ipairs(df.global.world.raws.creatures.all) do
	if v.creature_id == args.race then
		raceIndex = i
		race = v
		break
	end
end
if not race then
	error('rubble_caste_transform: Invalid race: '..args.race..'.')
end

-- Automatically handle caste gender
local gender = "FEMALE_"
if unit.sex == 1 then
	gender = "MALE_"
end

for i,v in ipairs(race.caste) do
	if v.caste_id == gender..args.caste then
		caste = i
		break
	end
end
if not caste then
	error('rubble_caste_transform: Invalid caste: '..args.caste..'.')
end

local transform = function(unit, race, caste)
	unit.enemy.normal_race = race
	unit.enemy.normal_caste = caste
	
	-- Are these two required?
	unit.enemy.were_race = race
	unit.enemy.were_caste = caste
	
	-- Inventory
	local inventoryItems = {}
	for _,item in ipairs(unit.inventory) do
		table.insert(inventoryItems, item:new());
	end
	dfhack.timeout(1, 'ticks', function()
		for _,item in ipairs(inventoryItems) do
			dfhack.items.moveToInventory(item.item, unit, item.mode, item.body_part_id)
			item:delete()
		end
		inventoryItems = {}
	end)
end

if args.delay and tonumber(args.delay) ~= nil and tonumber(args.delay) > 0 then
	timeout.add("libs_castes_dfhack_transform_"..args.unit, tonumber(args.delay), 'rubble_caste_transform -unit '..args.unit..' -race "'..args.race..'" -caste "'..args.caste..'"')
else
	transform(unit, raceIndex, caste)
end
